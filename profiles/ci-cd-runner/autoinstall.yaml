#cloud-config
# CI/CD Runner Installation
# GitHub Actions runner, Jenkins agent, and other CI/CD tools ready

version: 1

locale: en_US.UTF-8
keyboard:
  layout: us
  variant: ""

network:
  version: 2
  ethernets:
    eth0:
      dhcp4: true
      dhcp6: true

storage:
  layout:
    name: lvm

identity:
  hostname: ci-runner
  username: runner
  realname: "CI/CD Runner"
  password: "$6$rounds=4096$RnQ5KhAB$JXKhLcVJQBH4tPJYGPFc4KQur8bGKYGVLHGRhBVPZ8tZ5xYyCnbtJLtL7mPxLKHwZvJTGPBSZvNqXHKZkLuTC1"

ssh:
  install-server: true
  allow-pw: true

packages:
  # Version control
  - git
  - git-lfs
  - subversion
  - mercurial
  
  # Build tools
  - build-essential
  - cmake
  - make
  - gcc
  - g++
  
  # Languages and runtimes
  - python3
  - python3-pip
  - python3-venv
  - nodejs
  - npm
  - golang
  - rustc
  - cargo
  - openjdk-11-jdk
  - openjdk-17-jdk
  
  # Container tools
  - docker.io
  - docker-compose
  - podman
  
  # CI/CD tools
  - curl
  - wget
  - jq
  - zip
  - unzip
  
  # Testing tools
  - chromium-browser
  - firefox
  - xvfb
  
  # Database clients
  - postgresql-client
  - mysql-client
  - redis-tools
  
  # Monitoring
  - htop
  - iotop

package_update: true
package_upgrade: true
timezone: UTC

late-commands:
  # Add runner to docker group
  - curtin in-target --target=/target -- usermod -aG docker runner
  
  # Create runners directory
  - curtin in-target --target=/target -- mkdir -p /opt/runners
  - curtin in-target --target=/target -- chown runner:runner /opt/runners
  
  # Install GitHub CLI
  - |
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
      dd of=/target/usr/share/keyrings/githubcli-archive-keyring.gpg
  - |
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
      tee /target/etc/apt/sources.list.d/github-cli.list > /dev/null
  - curtin in-target --target=/target -- apt-get update
  - curtin in-target --target=/target -- apt-get install -y gh
  
  # Prepare for GitHub Actions runner
  - curtin in-target --target=/target -- mkdir -p /opt/actions-runner
  - curtin in-target --target=/target -- chown runner:runner /opt/actions-runner
  
  # Configure Docker for runners
  - |
    cat <<EOL > /target/etc/docker/daemon.json
    {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "3"
      },
      "storage-driver": "overlay2"
    }
    EOL
  
  # Increase file watchers for builds
  - echo "fs.inotify.max_user_watches=524288" >> /target/etc/sysctl.d/99-runners.conf
  
  # Create GitHub Actions runner setup script
  - |
    cat <<'SCRIPT' > /target/opt/runners/setup-github-runner.sh
    #!/bin/bash
    echo "Setup GitHub Actions Runner"
    echo "Usage: $0 <github-org-or-repo-url> <runner-token>"
    cd /opt/actions-runner
    LATEST_VERSION=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name' | sed 's/v//')
    curl -o actions-runner.tar.gz -L "https://github.com/actions/runner/releases/download/v${LATEST_VERSION}/actions-runner-linux-x64-${LATEST_VERSION}.tar.gz"
    tar xzf actions-runner.tar.gz
    ./config.sh --url "$1" --token "$2" --unattended
    sudo ./svc.sh install
    sudo ./svc.sh start
    SCRIPT
  - curtin in-target --target=/target -- chmod +x /opt/runners/setup-github-runner.sh
  
  # Enable services
  - curtin in-target --target=/target -- systemctl enable docker
