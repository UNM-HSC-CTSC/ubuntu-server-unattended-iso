name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allow manual triggering

env:
  UBUNTU_VERSION: "22.04.3"
  UBUNTU_MIRROR: "https://releases.ubuntu.com"

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq wget curl python3 make
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make scripts executable
        run: |
          chmod +x test.sh bin/* lib/*.sh tests/*.sh || true

      - name: Run tests
        run: |
          if [ -f Makefile ]; then make test; else ./test.sh; fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan autoinstall.yaml files
        run: |
          echo "Scanning autoinstall.yaml files for security issues..."
          # Check base configuration
          if [ -f share/ubuntu-base/autoinstall.yaml ]; then
            echo "Checking share/ubuntu-base/autoinstall.yaml"
            if grep -E "password:.*[^$]" "share/ubuntu-base/autoinstall.yaml" | grep -v "^#"; then
              echo "WARNING: Possible plaintext password in base configuration"
            fi
          fi
          # Check examples
          for yaml in share/examples/*/autoinstall.yaml; do
            if [ -f "$yaml" ]; then
              echo "Checking $yaml"
              if grep -E "password:.*[^$]" "$yaml" | grep -v "^#"; then
                echo "WARNING: Possible plaintext password in $yaml"
              fi
            fi
          done

  build-validation:
    name: Validate Build Process
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install minimal dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq python3 python3-pip make
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make scripts executable
        run: |
          chmod +x bin/* lib/*.sh tests/*.sh || true

      - name: Test build script help
        run: |
          echo "Testing ubuntu-iso help..."
          ./bin/ubuntu-iso --help


      - name: Validate ISO tools detection
        run: |
          echo "Testing ISO tools abstraction layer..."
          # Source the library and test detection
          bash -c "source ./lib/iso-tools.sh && detect_iso_backend && echo \"ISO backend: \$ISO_BACKEND\""

      - name: Validate configurations
        run: |
          echo "Validating autoinstall.yaml files..."
          # Validate base configuration
          if [ -f share/ubuntu-base/autoinstall.yaml ]; then
            echo "Validating base configuration..."
            python3 -c "import yaml; yaml.safe_load(open('share/ubuntu-base/autoinstall.yaml'))" || exit 1
          fi
          # Validate examples if they exist
          for yaml in share/examples/*/autoinstall.yaml; do
            if [ -f "$yaml" ]; then
              echo "Validating $yaml..."
              python3 -c "import yaml; yaml.safe_load(open('$yaml'))" || exit 1
            fi
          done

      - name: Test credential validation
        run: |
          echo "Testing credential validation logic..."
          if [ -f tests/verify-no-credentials.sh ]; then
            ./tests/verify-no-credentials.sh || echo "Note: Some tests may fail without full environment"
          else
            echo "Credential validation test not found - skipping"
          fi

      - name: Test dependencies
        run: |
          echo "Testing all dependencies are installed..."
          if [ -f tests/test-dependencies.sh ]; then
            ./tests/test-dependencies.sh
          else
            echo "Dependency test not found - running basic checks"
            for cmd in python3 wget curl; do
              command -v $cmd >/dev/null 2>&1 && echo "✓ $cmd" || echo "✗ $cmd"
            done
          fi