name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allow manual triggering

env:
  UBUNTU_VERSION: "22.04.3"
  UBUNTU_MIRROR: "https://releases.ubuntu.com"

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq wget curl python3 make
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make scripts executable
        run: |
          chmod +x test.sh scripts/*.sh bin/* || true

      - name: Run tests
        run: |
          if [ -f Makefile ]; then make test; else ./test.sh; fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan autoinstall.yaml files
        run: |
          echo "Scanning autoinstall.yaml files for security issues..."
          for yaml in profiles/*/autoinstall.yaml; do
            echo "Checking $yaml"
            if grep -E "password:.*[^$]" "$yaml" | grep -v "^#"; then
              echo "WARNING: Possible plaintext password in $yaml"
            fi
          done

  build-validation:
    name: Validate Build Process
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install minimal dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq python3 python3-pip make
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh bin/* || true

      - name: Test build script help
        run: |
          echo "Testing build-iso help..."
          ./bin/build-iso --help

      - name: Test generator script help
        run: |
          echo "Testing generate-autoinstall help..."
          ./bin/generate-autoinstall --help || echo "Generator is interactive only"

      - name: Validate ISO tools detection
        run: |
          echo "Testing ISO tools abstraction layer..."
          ./scripts/iso-tools.sh

      - name: Validate all profiles
        run: |
          echo "Validating all autoinstall.yaml files..."
          for profile in profiles/*/; do
            profile_name=$(basename "$profile")
            echo "Validating profile: $profile_name"
            if [ -f "$profile/autoinstall.yaml" ]; then
              ./scripts/validate-autoinstall.sh "$profile/autoinstall.yaml" || echo "Warning: Validation script needs Subiquity"
              ./scripts/validate-yaml-syntax.sh "$profile/autoinstall.yaml"
            fi
          done

      - name: Test credential validation
        run: |
          echo "Testing credential validation logic..."
          ./scripts/test-credential-simple.sh || echo "Note: Some tests may fail without full environment"

      - name: Test dependencies
        run: |
          echo "Testing all dependencies are installed..."
          ./scripts/test-dependencies.sh