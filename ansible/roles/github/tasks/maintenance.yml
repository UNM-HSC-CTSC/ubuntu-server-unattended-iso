---
# Configure cleanup and maintenance for GitHub Actions runners

- name: Create runner cleanup script
  template:
    src: runner-cleanup.sh.j2
    dest: /usr/local/bin/runner-cleanup
    owner: root
    group: root
    mode: '0755'

- name: Create Docker cleanup script
  template:
    src: docker-cleanup.sh.j2
    dest: /usr/local/bin/docker-cleanup
    owner: root
    group: root
    mode: '0755'

- name: Create runner update script
  template:
    src: update-runners.sh.j2
    dest: /usr/local/bin/update-runners
    owner: root
    group: root
    mode: '0755'

- name: Create backup script for runner configurations
  template:
    src: backup-runners.sh.j2
    dest: /usr/local/bin/backup-runners
    owner: root
    group: root
    mode: '0755'

- name: Schedule daily runner cleanup
  cron:
    name: "GitHub runner cleanup"
    hour: "2"
    minute: "0"
    job: "/usr/local/bin/runner-cleanup >> /var/log/github-runner/cleanup.log 2>&1"
    user: root

- name: Schedule Docker cleanup
  cron:
    name: "Docker cleanup for runners"
    hour: "3"
    minute: "0"
    job: "/usr/local/bin/docker-cleanup >> /var/log/github-runner/docker-cleanup.log 2>&1"
    user: root

- name: Schedule weekly runner updates check
  cron:
    name: "Check for runner updates"
    weekday: "0"
    hour: "4"
    minute: "0"
    job: "/usr/local/bin/update-runners --check >> /var/log/github-runner/updates.log 2>&1"
    user: root

- name: Schedule daily configuration backup
  cron:
    name: "Backup runner configurations"
    hour: "1"
    minute: "0"
    job: "/usr/local/bin/backup-runners >> /var/log/github-runner/backup.log 2>&1"
    user: root

- name: Create maintenance mode script
  copy:
    dest: /usr/local/bin/runner-maintenance
    content: |
      #!/bin/bash
      # Put runners in maintenance mode
      
      set -euo pipefail
      
      ACTION="${1:-status}"
      REASON="${2:-Scheduled maintenance}"
      
      case "$ACTION" in
        enable)
          echo "$REASON" > /etc/github-runner/maintenance.flag
          echo "Stopping all runners for maintenance..."
          for i in $(seq 1 {{ runner_count }}); do
            systemctl stop github-runner@$i || true
          done
          echo "Maintenance mode enabled. Reason: $REASON"
          ;;
        disable)
          if [ -f /etc/github-runner/maintenance.flag ]; then
            rm -f /etc/github-runner/maintenance.flag
            echo "Starting all runners..."
            for i in $(seq 1 {{ runner_count }}); do
              systemctl start github-runner@$i || true
            done
            echo "Maintenance mode disabled"
          else
            echo "Not in maintenance mode"
          fi
          ;;
        status)
          if [ -f /etc/github-runner/maintenance.flag ]; then
            echo "MAINTENANCE MODE ACTIVE"
            echo "Reason: $(cat /etc/github-runner/maintenance.flag)"
          else
            echo "Normal operation"
          fi
          ;;
        *)
          echo "Usage: $0 {enable|disable|status} [reason]"
          exit 1
          ;;
      esac
    owner: root
    group: root
    mode: '0755'

- name: Create runner diagnostic script
  copy:
    dest: /usr/local/bin/runner-diagnostics
    content: |
      #!/bin/bash
      # Collect diagnostic information for GitHub runners
      
      set -euo pipefail
      
      DIAG_DIR="/tmp/runner-diagnostics-$(date +%Y%m%d-%H%M%S)"
      mkdir -p "$DIAG_DIR"
      
      echo "Collecting runner diagnostics to $DIAG_DIR..."
      
      # System information
      {
        echo "=== System Information ==="
        uname -a
        echo
        echo "=== CPU Info ==="
        lscpu
        echo
        echo "=== Memory Info ==="
        free -h
        echo
        echo "=== Disk Usage ==="
        df -h
        echo
        echo "=== Docker Info ==="
        docker version
        docker info
      } > "$DIAG_DIR/system-info.txt"
      
      # Runner status
      {
        echo "=== Runner Status ==="
        runner-status
        echo
        echo "=== Service Status ==="
        for i in $(seq 1 {{ runner_count }}); do
          echo "Runner $i:"
          systemctl status github-runner@$i --no-pager || true
          echo
        done
      } > "$DIAG_DIR/runner-status.txt"
      
      # Recent logs
      {
        echo "=== Recent Service Logs ==="
        journalctl -u 'github-runner@*' --since '24 hours ago' --no-pager
      } > "$DIAG_DIR/service-logs.txt"
      
      # Configuration files (sanitized)
      mkdir -p "$DIAG_DIR/configs"
      for i in $(seq 1 {{ runner_count }}); do
        if [ -f "/home/runner$( [ $i -eq 1 ] && echo '' || echo $i )/actions-runner/.runner" ]; then
          jq 'del(.gitHubUrl) | del(.token)' "/home/runner$( [ $i -eq 1 ] && echo '' || echo $i )/actions-runner/.runner" \
            > "$DIAG_DIR/configs/runner$i.json" 2>/dev/null || true
        fi
      done
      
      # Create archive
      tar -czf "$DIAG_DIR.tar.gz" -C /tmp "$(basename $DIAG_DIR)"
      rm -rf "$DIAG_DIR"
      
      echo "Diagnostics collected: $DIAG_DIR.tar.gz"
    owner: root
    group: root
    mode: '0755'

- name: Create maintenance documentation
  copy:
    dest: /opt/github-runner/MAINTENANCE.md
    content: |
      # GitHub Runner Maintenance Guide
      
      ## Regular Maintenance Tasks
      
      ### Daily (Automated)
      - Runner work directory cleanup (2:00 AM)
      - Docker system prune (3:00 AM)
      - Configuration backups (1:00 AM)
      
      ### Weekly (Automated)
      - Check for runner updates (Sunday 4:00 AM)
      
      ### Monthly (Manual)
      - Review and rotate logs
      - Check disk usage trends
      - Update runner software if needed
      - Review security patches
      
      ## Maintenance Commands
      
      ```bash
      # Put runners in maintenance mode
      sudo runner-maintenance enable "System updates"
      
      # Check maintenance status
      sudo runner-maintenance status
      
      # Resume normal operation
      sudo runner-maintenance disable
      
      # Manual cleanup
      sudo runner-cleanup
      sudo docker-cleanup
      
      # Update runners
      sudo update-runners
      
      # Collect diagnostics
      sudo runner-diagnostics
      ```
      
      ## Troubleshooting Common Issues
      
      ### Runner Won't Start
      1. Check if in maintenance mode: `runner-maintenance status`
      2. Check service logs: `journalctl -u github-runner@1 -n 50`
      3. Verify configuration: `runner-status`
      4. Check disk space: `df -h /home/runner/work`
      
      ### High Disk Usage
      1. Run cleanup: `runner-cleanup`
      2. Check Docker: `docker system df`
      3. Run Docker cleanup: `docker-cleanup`
      4. Check logs: `du -sh /var/log/github-runner/`
      
      ### Runner Offline in GitHub
      1. Check network: `curl -I {{ github_enterprise_url }}`
      2. Check service: `systemctl status github-runner@1`
      3. Re-register if needed: `register-runner`
      
      ## Backup and Recovery
      
      Configurations are backed up daily to:
      `/var/backups/github-runner/`
      
      To restore:
      ```bash
      sudo runner-maintenance enable "Restore"
      # Restore from backup
      sudo tar -xzf /var/backups/github-runner/backup-YYYYMMDD.tar.gz -C /
      sudo runner-maintenance disable
      ```
    owner: root
    group: root
    mode: '0644'

- name: Set up log cleanup for old runner logs
  copy:
    dest: /etc/cron.daily/github-runner-log-cleanup
    content: |
      #!/bin/bash
      # Clean up old GitHub runner logs
      
      # Remove runner work logs older than 7 days
      find /home/runner*/work -name "*.log" -type f -mtime +7 -delete 2>/dev/null
      
      # Remove old diagnostic logs
      find /home/runner*/actions-runner/_diag -name "*.log" -type f -mtime +30 -delete 2>/dev/null
      
      # Clean up old cleanup logs
      find /var/log/github-runner -name "*.log.*" -type f -mtime +30 -delete 2>/dev/null
      
      # Truncate large active logs
      for log in /var/log/github-runner/*.log; do
        if [ -f "$log" ] && [ $(stat -c%s "$log") -gt 104857600 ]; then
          tail -n 10000 "$log" > "$log.tmp"
          mv "$log.tmp" "$log"
        fi
      done
    owner: root
    group: root
    mode: '0755'