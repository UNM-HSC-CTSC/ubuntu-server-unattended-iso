#!/bin/bash
# {{ ansible_managed }}
# Interactive GitHub Actions runner registration

set -euo pipefail

echo "=== GitHub Actions Runner Registration ==="
echo ""
echo "This script will help you register a new runner."
echo ""

# Find available runner slot
RUNNER_NUM=""
for i in $(seq 1 {{ runner_count }}); do
    if [ $i -eq 1 ]; then
        RUNNER_USER="runner"
        RUNNER_HOME="/home/runner"
    else
        RUNNER_USER="runner$i"
        RUNNER_HOME="/home/runner$i"
    fi
    
    if [ ! -f "$RUNNER_HOME/actions-runner/.runner" ]; then
        RUNNER_NUM="$i"
        break
    fi
done

if [ -z "$RUNNER_NUM" ]; then
    echo "ERROR: All runner slots are in use ({{ runner_count }} runners configured)"
    echo ""
    echo "Current runners:"
    for i in $(seq 1 {{ runner_count }}); do
        if [ -f "/home/runner$( [ $i -eq 1 ] && echo '' || echo $i )/actions-runner/.runner" ]; then
            echo "  Runner $i: $(jq -r .name /home/runner$( [ $i -eq 1 ] && echo '' || echo $i )/actions-runner/.runner 2>/dev/null || echo 'ERROR')"
        fi
    done
    exit 1
fi

echo "Available slot: Runner $RUNNER_NUM ($RUNNER_USER)"
echo ""

# Get registration level
echo "Where do you want to register this runner?"
echo "1) Repository"
echo "2) Organization"
echo "3) Enterprise"
read -p "Selection (1-3): " LEVEL

case $LEVEL in
    1)
        read -p "Repository URL (e.g., {{ github_enterprise_url }}/org/repo): " REPO_URL
        RUNNER_URL="$REPO_URL"
        RUNNER_SCOPE="repository"
        ;;
    2)
        read -p "Organization name: " ORG_NAME
        RUNNER_URL="{{ github_enterprise_url }}/$ORG_NAME"
        RUNNER_SCOPE="organization"
        ;;
    3)
        RUNNER_URL="{{ github_enterprise_url }}"
        RUNNER_SCOPE="enterprise"
        ;;
    *)
        echo "Invalid selection"
        exit 1
        ;;
esac

echo ""
echo "To get a registration token:"
echo "1. Go to: $RUNNER_URL"
echo "2. Navigate to: Settings → Actions → Runners"
echo "3. Click: 'New self-hosted runner'"
echo "4. Copy the token from the registration command"
echo ""
read -p "Registration token: " RUNNER_TOKEN

if [ -z "$RUNNER_TOKEN" ]; then
    echo "ERROR: Token cannot be empty"
    exit 1
fi

# Get runner name
DEFAULT_NAME="hsc-ctsc-runner-$(hostname -s)-$RUNNER_NUM"
read -p "Runner name [$DEFAULT_NAME]: " RUNNER_NAME
RUNNER_NAME="${RUNNER_NAME:-$DEFAULT_NAME}"

# Get labels
read -p "Additional labels (comma-separated) []: " EXTRA_LABELS
if [ -n "$EXTRA_LABELS" ]; then
    RUNNER_LABELS="{{ runner_labels }},$EXTRA_LABELS"
else
    RUNNER_LABELS="{{ runner_labels }}"
fi

# Get runner group
read -p "Runner group [{{ runner_group }}]: " RUNNER_GROUP
RUNNER_GROUP="${RUNNER_GROUP:-{{ runner_group }}}"

echo ""
echo "=== Configuration Summary ==="
echo "Runner slot: $RUNNER_NUM"
echo "Runner name: $RUNNER_NAME"
echo "URL: $RUNNER_URL"
echo "Labels: $RUNNER_LABELS"
echo "Group: $RUNNER_GROUP"
echo "Ephemeral: {% if runner_ephemeral %}yes{% else %}no{% endif %}"
echo ""
read -p "Proceed with registration? (y/N): " CONFIRM

if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo "Registration cancelled"
    exit 0
fi

# Configure runner
echo ""
echo "Configuring runner..."

/opt/github-runner/scripts/configure-runner.sh \
    "$RUNNER_NAME" \
    "$RUNNER_TOKEN" \
    "$RUNNER_URL" \
    "$RUNNER_LABELS" \
    "$RUNNER_GROUP"

echo ""
echo "Runner registered successfully!"
echo ""
echo "Useful commands:"
echo "  Check status:  sudo systemctl status github-runner@$RUNNER_NUM"
echo "  View logs:     sudo journalctl -u github-runner@$RUNNER_NUM -f"
echo "  Stop runner:   sudo systemctl stop github-runner@$RUNNER_NUM"
echo "  Start runner:  sudo systemctl start github-runner@$RUNNER_NUM"